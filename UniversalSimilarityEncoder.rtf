{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red202\green202\blue202;\red188\green135\blue186;\red23\green23\blue23;
\red212\green212\blue212;\red194\green126\blue101;\red88\green147\blue206;\red212\green214\blue154;\red140\green211\blue254;
\red167\green197\blue152;\red113\green184\blue255;\red113\green171\blue89;\red67\green192\blue160;}
{\*\expandedcolortbl;;\cssrgb\c83137\c83137\c83137;\cssrgb\c78824\c61176\c77647;\cssrgb\c11765\c11765\c11765;
\cssrgb\c86275\c86275\c86275;\cssrgb\c80784\c56863\c47059;\cssrgb\c41176\c64706\c84314;\cssrgb\c86275\c86275\c66667;\cssrgb\c61176\c86275\c99608;
\cssrgb\c70980\c80784\c65882;\cssrgb\c50980\c77647\c100000;\cssrgb\c50980\c71765\c42353;\cssrgb\c30588\c78824\c69020;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\
\pard\pardeftab720\partightenfactor0
\cf3 \cb4 \strokec3 import\cf2 \strokec2  numpy \cf3 \strokec3 as\cf2 \strokec2  np\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 import\cf2 \strokec2  pandas \cf3 \strokec3 as\cf2 \strokec2  pd\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 import\cf2 \strokec2  tensorflow \cf3 \strokec3 as\cf2 \strokec2  tf\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 import\cf2 \strokec2  tensorflow_hub \cf3 \strokec3 as\cf2 \strokec2  hub\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 import\cf2 \strokec2  matplotlib.pyplot \cf3 \strokec3 as\cf2 \strokec2  plt\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 import\cf2 \strokec2  arabic_reshaper\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 import\cf2 \strokec2  seaborn \cf3 \strokec3 as\cf2 \strokec2  sns\cf2 \cb1 \strokec2 \
\cf3 \cb4 \strokec3 from\cf2 \strokec2  bidi.algorithm \cf3 \strokec3 import\cf2 \strokec2  get_display\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 embed = hub.load\cf5 \strokec5 (\cf6 \strokec6 "https://tfhub.dev/google/universal-sentence-encoder/4"\cf5 \strokec5 )\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb4 \strokec7 def\cf2 \cb4 \strokec2  \cf8 \cb4 \strokec8 calculate_similarity\cf2 \cb4 \strokec2 (\cf9 \cb4 \strokec9 sentence1\cf2 \cb4 \strokec2 , \cf9 \cb4 \strokec9 sentence2\cf2 \cb4 \strokec2 )\cf5 \strokec5 :\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2     embeddings = embed\cf5 \strokec5 ([\cf2 \strokec2 sentence1\cf5 \strokec5 ,\cf2 \strokec2  sentence2\cf5 \strokec5 ])\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     similarity = np.inner\cf5 \strokec5 (\cf2 \strokec2 embeddings\cf5 \strokec5 ,\cf2 \strokec2  embeddings\cf5 \strokec5 )\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf3 \strokec3 return\cf2 \strokec2  similarity\cf5 \strokec5 [\cf10 \cb4 \strokec10 0\cf5 \cb4 \strokec5 ,\cf2 \strokec2  \cf10 \cb4 \strokec10 1\cf5 \cb4 \strokec5 ]\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb4 \strokec7 def\cf2 \cb4 \strokec2  \cf8 \cb4 \strokec8 run_and_display\cf2 \cb4 \strokec2 (\cf9 \cb4 \strokec9 sentences_column1\cf2 \cb4 \strokec2 , \cf9 \cb4 \strokec9 sentences_column2\cf2 \cb4 \strokec2 )\cf5 \strokec5 :\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2     valid_pairs = \cf5 \strokec5 [\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2         \cf5 \strokec5 (\cf2 \strokec2 s1\cf5 \strokec5 ,\cf2 \strokec2  s2\cf5 \strokec5 )\cf2 \strokec2  \cf3 \strokec3 for\cf2 \strokec2  s1\cf5 \strokec5 ,\cf2 \strokec2  s2 \cf11 \cb4 \strokec11 in\cf2 \cb4 \strokec2  \cf8 \cb4 \strokec8 zip\cf5 \cb4 \strokec5 (\cf2 \strokec2 sentences_column1\cf5 \strokec5 ,\cf2 \strokec2  sentences_column2\cf5 \strokec5 )\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2         \cf3 \strokec3 if\cf2 \strokec2  s1 \cf11 \cb4 \strokec11 and\cf2 \cb4 \strokec2  s2 \cf11 \cb4 \strokec11 and\cf2 \cb4 \strokec2  s1 != s2 \cf11 \cb4 \strokec11 and\cf2 \cb4 \strokec2  \cf6 \strokec6 "\uc0\u1606 \u1605 \u1608 \u1584 \u1580  \u1604 \u1594 \u1608 \u1610 "\cf2 \strokec2  \cf11 \cb4 \strokec11 not\cf2 \cb4 \strokec2  \cf11 \cb4 \strokec11 in\cf2 \cb4 \strokec2  \cf5 \strokec5 \{\cf2 \strokec2 s1\cf5 \strokec5 ,\cf2 \strokec2  s2\cf5 \strokec5 \}\cf2 \strokec2  \cf11 \cb4 \strokec11 and\cf2 \cb4 \strokec2  \cf11 \cb4 \strokec11 not\cf2 \cb4 \strokec2  pd.isna\cf5 \strokec5 (\cf2 \strokec2 s2\cf5 \strokec5 )\cf2 \strokec2   \cf11 \cb4 \strokec11 and\cf2 \cb4 \strokec2  \cf11 \cb4 \strokec11 not\cf2 \cb4 \strokec2  pd.isna\cf5 \strokec5 (\cf2 \strokec2 s1\cf5 \strokec5 )\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf5 \strokec5 ]\cf2 \cb1 \strokec2 \
\
\cf2 \cb4 \strokec2     similarities = \cf5 \strokec5 [\cf2 \strokec2 calculate_similarity\cf5 \strokec5 (\cf2 \strokec2 s1\cf5 \strokec5 ,\cf2 \strokec2  s2\cf5 \strokec5 )\cf2 \strokec2  \cf3 \strokec3 for\cf2 \strokec2  s1\cf5 \strokec5 ,\cf2 \strokec2  s2 \cf11 \cb4 \strokec11 in\cf2 \cb4 \strokec2  valid_pairs\cf5 \strokec5 ]\cf2 \cb1 \strokec2 \
\
\cf2 \cb4 \strokec2     \cf3 \strokec3 if\cf2 \strokec2  \cf11 \cb4 \strokec11 not\cf2 \cb4 \strokec2  valid_pairs\cf5 \strokec5 :\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2         \cf8 \cb4 \strokec8 print\cf5 \cb4 \strokec5 (\cf6 \strokec6 "No valid pairs found."\cf5 \strokec5 )\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2         \cf3 \strokec3 return\cf2 \cb1 \strokec2 \
\
\cf2 \cb4 \strokec2     \cf12 \cb4 \strokec12 # plt.figure(figsize=(16, 12))\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf12 \cb4 \strokec12 # plt.hist(similarities, bins=30, color='red', edgecolor='black', alpha=0.7)\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf12 \cb4 \strokec12 # plt.xlabel(' Similarity', fontsize=28, fontweight='bold')\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf12 \cb4 \strokec12 # plt.ylabel('Count', fontsize=28, fontweight='bold')\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf12 \cb4 \strokec12 # plt.title('Bard (Universal Similarity Encoder) - AE', fontsize=30, fontweight='bold',pad=20)\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf12 \cb4 \strokec12 # plt.xticks(fontsize=26)\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf12 \cb4 \strokec12 # plt.yticks(range(0, int(max(plt.yticks()[0])) + 1, 10), fontsize=26)\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf12 \cb4 \strokec12 # ax = plt.gca()\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf12 \cb4 \strokec12 # for axis in ['top','bottom','left','right']:\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf12 \cb4 \strokec12 #   ax.spines[axis].set_linewidth(5)\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf12 \cb4 \strokec12 # plt.show()\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf8 \cb4 \strokec8 print\cf5 \cb4 \strokec5 (\cf6 \strokec6 "min"\cf5 \strokec5 ,\cf2 \strokec2 np.\cf8 \cb4 \strokec8 min\cf5 \cb4 \strokec5 (\cf2 \strokec2 similarities\cf5 \strokec5 ))\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf8 \cb4 \strokec8 print\cf5 \cb4 \strokec5 (\cf6 \strokec6 "mean"\cf5 \strokec5 ,\cf2 \strokec2 np.mean\cf5 \strokec5 (\cf2 \strokec2 similarities\cf5 \strokec5 ))\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2     \cf8 \cb4 \strokec8 print\cf5 \cb4 \strokec5 (\cf6 \strokec6 "max"\cf5 \strokec5 ,\cf2 \strokec2 np.\cf8 \cb4 \strokec8 max\cf5 \cb4 \strokec5 (\cf2 \strokec2 similarities\cf5 \strokec5 ))\cf2 \cb1 \strokec2 \
\
\cf2 \cb4 \strokec2 sns.\cf13 \cb4 \strokec13 set\cf5 \cb4 \strokec5 (\cf2 \strokec2 style=\cf6 \strokec6 "white"\cf5 \strokec5 )\cf2 \cb1 \strokec2 \
\
\cf2 \cb4 \strokec2 df = pd.read_excel\cf5 \strokec5 (\cf6 \strokec6 'Tunis - GPT 4 - F.xlsx'\cf5 \strokec5 )\cf2 \cb1 \strokec2 \
\
\cf2 \cb4 \strokec2 column1 = df\cf5 \strokec5 [\cf6 \strokec6 'Original Dialect'\cf5 \strokec5 ]\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf12 \cb4 \strokec12 # column2 = df['Back_Translation']\cf2 \cb1 \strokec2 \
\cf12 \cb4 \strokec12 # column2 = df['Back_Transaltion']\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 column2 = df\cf5 \strokec5 [\cf6 \strokec6 'Translated Dialect'\cf5 \strokec5 ]\cf2 \cb1 \strokec2 \
\
\pard\pardeftab720\partightenfactor0
\cf12 \cb4 \strokec12 # df = pd.read_excel('YE - QADI - 3.5.xlsx')\cf2 \cb1 \strokec2 \
\
\cf12 \cb4 \strokec12 # column1 = df['Dialectal']\cf2 \cb1 \strokec2 \
\cf12 \cb4 \strokec12 # column2 = df['Back Translation: MSA to D']\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \strokec2 df = df\cf5 \strokec5 [\cf2 \strokec2 column2.notna\cf5 \strokec5 ()]\cf2 \cb1 \strokec2 \
\cf2 \cb4 \strokec2 run_and_display\cf5 \strokec5 (\cf2 \strokec2 column1\cf5 \strokec5 ,\cf2 \strokec2  column2\cf5 \strokec5 )\cf2 \cb1 \strokec2 \
\
\
}
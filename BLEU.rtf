{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red188\green135\blue186;\red23\green23\blue23;\red202\green202\blue202;
\red212\green212\blue212;\red194\green126\blue101;\red113\green184\blue255;\red212\green214\blue154;\red67\green192\blue160;
\red167\green197\blue152;\red113\green171\blue89;}
{\*\expandedcolortbl;;\cssrgb\c78824\c61176\c77647;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c86275\c86275\c86275;\cssrgb\c80784\c56863\c47059;\cssrgb\c50980\c77647\c100000;\cssrgb\c86275\c86275\c66667;\cssrgb\c30588\c78824\c69020;
\cssrgb\c70980\c80784\c65882;\cssrgb\c50980\c71765\c42353;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  nltk\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4 nltk.download\cf5 \strokec5 (\cf6 \strokec6 'punkt'\cf5 \strokec5 )\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 import\cf4 \strokec4  pandas \cf2 \strokec2 as\cf4 \strokec4  pd\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  nltk.translate.bleu_score \cf2 \strokec2 import\cf4 \strokec4  sentence_bleu\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  nltk.tokenize \cf2 \strokec2 import\cf4 \strokec4  word_tokenize\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  numpy \cf2 \strokec2 as\cf4 \strokec4  np\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4 df = pd.read_excel\cf5 \strokec5 (\cf6 \strokec6 "Tunis - GPT 4 - F.xlsx"\cf5 \strokec5 )\cf4 \cb1 \strokec4 \
\
\cf4 \cb3 \strokec4 reference_translations = df\cf5 \strokec5 [\cf6 \strokec6 'Original Dialect'\cf5 \strokec5 ]\cf4 \strokec4 .tolist\cf5 \strokec5 ()\cf4 \cb1 \strokec4 \
\cf4 \cb3 \strokec4 dialect_translations = df\cf5 \strokec5 [\cf6 \strokec6 'Translated Dialect'\cf5 \strokec5 ]\cf4 \strokec4 .tolist\cf5 \strokec5 ()\cf4 \cb1 \strokec4 \
\
\cf4 \cb3 \strokec4 reference_translations_tokenized = \cf5 \strokec5 [\cf4 \strokec4 word_tokenize\cf5 \strokec5 (\cf4 \strokec4 ref\cf5 \strokec5 )\cf4 \strokec4  \cf2 \strokec2 for\cf4 \strokec4  ref \cf7 \cb3 \strokec7 in\cf4 \cb3 \strokec4  reference_translations \cf2 \strokec2 if\cf4 \strokec4  \cf8 \cb3 \strokec8 isinstance\cf5 \cb3 \strokec5 (\cf4 \strokec4 ref\cf5 \strokec5 ,\cf4 \strokec4  \cf9 \cb3 \strokec9 str\cf5 \cb3 \strokec5 )]\cf4 \cb1 \strokec4 \
\
\cf4 \cb3 \strokec4 total_bleu_score = \cf10 \cb3 \strokec10 0\cf4 \cb1 \strokec4 \
\cf4 \cb3 \strokec4 total_references = \cf10 \cb3 \strokec10 0\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 for\cf4 \strokec4  reference\cf5 \strokec5 ,\cf4 \strokec4  dialect \cf7 \cb3 \strokec7 in\cf4 \cb3 \strokec4  \cf8 \cb3 \strokec8 zip\cf5 \cb3 \strokec5 (\cf4 \strokec4 reference_translations_tokenized\cf5 \strokec5 ,\cf4 \strokec4  dialect_translations\cf5 \strokec5 ):\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 \strokec4     \cf2 \strokec2 if\cf4 \strokec4  \cf8 \cb3 \strokec8 isinstance\cf5 \cb3 \strokec5 (\cf4 \strokec4 dialect\cf5 \strokec5 ,\cf4 \strokec4  \cf9 \cb3 \strokec9 str\cf5 \cb3 \strokec5 ):\cf4 \cb1 \strokec4 \
\cf4 \cb3 \strokec4         dialect_tokenized = word_tokenize\cf5 \strokec5 (\cf4 \strokec4 dialect\cf5 \strokec5 )\cf4 \cb1 \strokec4 \
\cf4 \cb3 \strokec4         bleu_score = sentence_bleu\cf5 \strokec5 ([\cf4 \strokec4 reference\cf5 \strokec5 ],\cf4 \strokec4  dialect_tokenized\cf5 \strokec5 ,\cf4 \strokec4  weights=\cf5 \strokec5 (\cf10 \cb3 \strokec10 1\cf5 \cb3 \strokec5 ,\cf4 \strokec4  \cf10 \cb3 \strokec10 0\cf5 \cb3 \strokec5 ,\cf4 \strokec4  \cf10 \cb3 \strokec10 0\cf5 \cb3 \strokec5 ,\cf4 \strokec4  \cf10 \cb3 \strokec10 0\cf5 \cb3 \strokec5 ))\cf4 \cb1 \strokec4 \
\cf4 \cb3 \strokec4         total_bleu_score += bleu_score\cf4 \cb1 \strokec4 \
\cf4 \cb3 \strokec4         total_references += \cf10 \cb3 \strokec10 1\cf4 \cb1 \strokec4 \
\cf4 \cb3 \strokec4     \cf2 \strokec2 else\cf5 \strokec5 :\cf4 \cb1 \strokec4 \
\cf4 \cb3 \strokec4         \cf11 \cb3 \strokec11 # If the dialect is not a string (NaN or empty), assign a BLEU score of 0\cf4 \cb1 \strokec4 \
\cf4 \cb3 \strokec4         total_references += \cf10 \cb3 \strokec10 1\cf4 \cb1 \strokec4 \
\
\cf4 \cb3 \strokec4 average_bleu_score = total_bleu_score / total_references \cf2 \strokec2 if\cf4 \strokec4  total_references > \cf10 \cb3 \strokec10 0\cf4 \cb3 \strokec4  \cf2 \strokec2 else\cf4 \strokec4  \cf10 \cb3 \strokec10 0\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf8 \cb3 \strokec8 print\cf5 \cb3 \strokec5 (\cf6 \strokec6 "Average BLEU score:"\cf5 \strokec5 ,\cf4 \strokec4  average_bleu_score\cf5 \strokec5 )\cf4 \cb1 \strokec4 \
\
}